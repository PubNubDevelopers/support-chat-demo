{"version":3,"sources":["core/endpoints/fetch_messages.js"],"names":["__processMessage","modules","message","config","crypto","cipherKey","decrypt","e","getOperation","operationConstants","PNFetchMessagesOperation","validateParams","incomingParams","channels","includeMessageActions","length","subscribeKey","TypeError","getURL","endpoint","stringifiedChannels","join","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","start","end","count","stringifiedTimeToken","includeMeta","outgoingParams","max","string_message_token","include_meta","handleResponse","serverResponse","response","Object","keys","forEach","channelName","messageEnvelope","announce","channel","timetoken","actions","data","meta","push"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport {\n  FetchMessagesArguments,\n  FetchMessagesResponse,\n  MessageAnnouncement,\n  HistoryV3Response,\n  ModulesInject,\n} from '../flow_interfaces';\nimport operationConstants from '../constants/operations';\nimport utils from '../utils';\n\nfunction __processMessage(modules, message: Object): Object | null {\n  let { config, crypto } = modules;\n  if (!config.cipherKey) return message;\n\n  try {\n    return crypto.decrypt(message);\n  } catch (e) {\n    return message;\n  }\n}\n\nexport function getOperation(): string {\n  return operationConstants.PNFetchMessagesOperation;\n}\n\nexport function validateParams(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n) {\n  let { channels, includeMessageActions = false } = incomingParams;\n  let { config } = modules;\n\n  if (!channels || channels.length === 0) return 'Missing channels';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n\n  if (includeMessageActions && channels.length > 1) {\n    throw new TypeError('History can return actions data for a single channel only. Either pass a single channel or disable the includeMessageActions flag.');\n  }\n}\n\nexport function getURL(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n): string {\n  let { channels = [], includeMessageActions = false } = incomingParams;\n  let { config } = modules;\n  const endpoint = !includeMessageActions ? 'history' : 'history-with-actions';\n\n  let stringifiedChannels = channels.length > 0 ? channels.join(',') : ',';\n  return `/v3/${endpoint}/sub-key/${\n    config.subscribeKey\n  }/channel/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(\n  modules: ModulesInject,\n  incomingParams: FetchMessagesArguments\n): Object {\n  const {\n    start,\n    end,\n    count,\n    stringifiedTimeToken = false,\n    includeMeta = false,\n  } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if (count) outgoingParams.max = count;\n  if (start) outgoingParams.start = start;\n  if (end) outgoingParams.end = end;\n  if (stringifiedTimeToken) outgoingParams.string_message_token = 'true';\n  if (includeMeta) outgoingParams.include_meta = 'true';\n\n  return outgoingParams;\n}\n\nexport function handleResponse(\n  modules: ModulesInject,\n  serverResponse: HistoryV3Response\n): FetchMessagesResponse {\n  const response: FetchMessagesResponse = {\n    channels: {},\n  };\n\n  Object.keys(serverResponse.channels || {}).forEach((channelName) => {\n    response.channels[channelName] = [];\n\n    (serverResponse.channels[channelName] || []).forEach((messageEnvelope) => {\n      let announce: MessageAnnouncement = {};\n      announce.channel = channelName;\n      announce.timetoken = messageEnvelope.timetoken;\n      announce.message = __processMessage(modules, messageEnvelope.message);\n\n      if (messageEnvelope.actions) {\n        announce.actions = messageEnvelope.actions;\n\n        // This should be kept for few updates for existing clients consistency.\n        announce.data = messageEnvelope.actions;\n      }\n      if (messageEnvelope.meta) {\n        announce.meta = messageEnvelope.meta;\n      }\n\n      response.channels[channelName].push(announce);\n    });\n  });\n\n  return response;\n}\n"],"file":"fetch_messages.js"}