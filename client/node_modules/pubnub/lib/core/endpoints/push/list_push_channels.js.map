{"version":3,"sources":["core/endpoints/push/list_push_channels.js"],"names":["getOperation","operationConstants","PNPushNotificationEnabledChannelsOperation","validateParams","modules","incomingParams","device","pushGateway","topic","config","subscribeKey","getURL","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","environment","parameters","type","Object","assign","handleResponse","serverResponse","channels"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;;;AAEO,SAASA,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,0CAA1B;AACD;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAgDC,cAAhD,EAAkF;AAAA,MACjFC,MADiF,GAClDD,cADkD,CACjFC,MADiF;AAAA,MACzEC,WADyE,GAClDF,cADkD,CACzEE,WADyE;AAAA,MAC5DC,KAD4D,GAClDH,cADkD,CAC5DG,KAD4D;AAAA,MAEjFC,MAFiF,GAEtEL,OAFsE,CAEjFK,MAFiF;AAIvF,MAAI,CAACH,MAAL,EAAa,OAAO,4BAAP;AACb,MAAI,CAACC,WAAL,EAAkB,OAAO,mDAAP;AAClB,MAAIA,WAAW,KAAK,OAAhB,IAA2B,CAACC,KAAhC,EAAuC,OAAO,qBAAP;AACvC,MAAI,CAACC,MAAM,CAACC,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASC,MAAT,CAAgBP,OAAhB,EAAwCC,cAAxC,EAAkF;AAAA,MACjFC,MADiF,GACzDD,cADyD,CACjFC,MADiF;AAAA,MACzEC,WADyE,GACzDF,cADyD,CACzEE,WADyE;AAAA,MAEjFE,MAFiF,GAEtEL,OAFsE,CAEjFK,MAFiF;;AAIvF,MAAIF,WAAW,KAAK,OAApB,EAA6B;AAC3B,sCAA2BE,MAAM,CAACC,YAAlC,4BAAgEJ,MAAhE;AACD;;AAED,oCAA2BG,MAAM,CAACC,YAAlC,sBAA0DJ,MAA1D;AACD;;AAEM,SAASM,iBAAT,OAAsD;AAAA,MAAzBH,MAAyB,QAAzBA,MAAyB;AAC3D,SAAOA,MAAM,CAACI,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBX,OAAvB,EAA+CC,cAA/C,EAAyF;AAAA,MACxFE,WADwF,GACpCF,cADoC,CACxFE,WADwF;AAAA,8BACpCF,cADoC,CAC3EW,WAD2E;AAAA,MAC3EA,WAD2E,sCAC7D,aAD6D;AAAA,MAC9CR,KAD8C,GACpCH,cADoC,CAC9CG,KAD8C;AAE9F,MAAIS,UAAU,GAAG;AAAEC,IAAAA,IAAI,EAAEX;AAAR,GAAjB;;AAEA,MAAIA,WAAW,KAAK,OAApB,EAA6B;AAC3BU,IAAAA,UAAU,GAAGE,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,EAA8B;AAAED,MAAAA,WAAW,EAAXA,WAAF;AAAeR,MAAAA,KAAK,EAALA;AAAf,KAA9B,CAAb;AACA,WAAOS,UAAU,CAACC,IAAlB;AACD;;AAED,SAAOD,UAAP;AACD;;AAEM,SAASI,cAAT,CAAwBjB,OAAxB,EAAgDkB,cAAhD,EAAqG;AAC1G,SAAO;AAAEC,IAAAA,QAAQ,EAAED;AAAZ,GAAP;AACD","sourcesContent":["/* @flow */\n\nimport { ListChannelsArgs, ListChannelsResponse, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\n\nexport function getOperation(): string {\n  return operationConstants.PNPushNotificationEnabledChannelsOperation;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: ListChannelsArgs) {\n  let { device, pushGateway, topic } = incomingParams;\n  let { config } = modules;\n\n  if (!device) return 'Missing Device ID (device)';\n  if (!pushGateway) return 'Missing GW Type (pushGateway: gcm, apns or apns2)';\n  if (pushGateway === 'apns2' && !topic) return 'Missing APNS2 topic';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: ListChannelsArgs): string {\n  let { device, pushGateway } = incomingParams;\n  let { config } = modules;\n\n  if (pushGateway === 'apns2') {\n    return `/v2/push/sub-key/${config.subscribeKey}/devices-apns2/${device}`;\n  }\n\n  return `/v1/push/sub-key/${config.subscribeKey}/devices/${device}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: ListChannelsArgs): Object {\n  let { pushGateway, environment = 'development', topic } = incomingParams;\n  let parameters = { type: pushGateway };\n\n  if (pushGateway === 'apns2') {\n    parameters = Object.assign({}, parameters, { environment, topic });\n    delete parameters.type;\n  }\n\n  return parameters;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: Array<string>): ListChannelsResponse {\n  return { channels: serverResponse };\n}\n"],"file":"list_push_channels.js"}