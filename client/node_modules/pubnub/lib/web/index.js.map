{"version":3,"sources":["web/index.js"],"names":["sendBeacon","url","navigator","base64ToBinary","base64String","parsedWordArray","CryptoJS","enc","Base64","parse","words","arrayBuffer","ArrayBuffer","length","view","Uint8Array","wordIdx","word","byteOffset","buffer","stringifyBufferKeys","obj","isObject","value","constructor","Object","isString","String","isNumber","isFinite","normalizedObject","keys","forEach","key","keyIsString","stringifiedKey","Array","isArray","indexOf","bytes","split","reduce","string","byte","fromCharCode","isNaN","parseInt","setup","listenToBrowserNetworkEvents","db","sdkFamily","networking","Networking","del","get","post","patch","cbor","Cbor","CborReader","decode","window","addEventListener","networkDownDetected","networkUpDetected","PubNubCore"],"mappings":"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","sourcesContent":["/* @flow */\n/* eslint no-bitwise: [\"error\", { \"allow\": [\"~\", \"&\", \">>\"] }] */\n/* global navigator, window */\n\nimport CborReader from 'cbor-js';\nimport PubNubCore from '../core/pubnub-common';\nimport Networking from '../networking';\nimport CryptoJS from '../core/components/cryptography/hmac-sha256';\nimport db from '../db/web';\nimport Cbor from '../cbor/common';\nimport { del, get, post, patch } from '../networking/modules/web-node';\nimport { InternalSetupStruct } from '../core/flow_interfaces';\n\nfunction sendBeacon(url: string) {\n  if (navigator && navigator.sendBeacon) {\n    navigator.sendBeacon(url);\n  } else {\n    return false;\n  }\n}\n\nfunction base64ToBinary(base64String: string) {\n  const parsedWordArray = CryptoJS.enc.Base64.parse(base64String).words;\n  const arrayBuffer = new ArrayBuffer(parsedWordArray.length * 4);\n  const view = new Uint8Array(arrayBuffer);\n\n  for (let wordIdx = 0; wordIdx < parsedWordArray.length; wordIdx += 1) {\n    const word = parsedWordArray[wordIdx];\n    const byteOffset = wordIdx * 4;\n    view[byteOffset] = (word & 0xff000000) >> 24;\n    view[byteOffset + 1] = (word & 0x00ff0000) >> 16;\n    view[byteOffset + 2] = (word & 0x0000ff00) >> 8;\n    view[byteOffset + 3] = (word & 0x000000ff);\n  }\n\n  return view.buffer;\n}\n\nfunction stringifyBufferKeys(obj) {\n  const isObject = (value) => value && typeof value === 'object' && value.constructor === Object;\n  const isString = (value) => typeof value === 'string' || value instanceof String;\n  const isNumber = (value) => typeof value === 'number' && isFinite(value);\n\n  if (!isObject(obj)) {\n    return obj;\n  }\n\n  const normalizedObject = {};\n\n  Object.keys(obj).forEach((key: any) => {\n    const keyIsString = isString(key);\n    let stringifiedKey = key;\n    let value = obj[key];\n\n    if (Array.isArray(key) || keyIsString && key.indexOf(',') >= 0) {\n      const bytes: Array<any> = keyIsString ? key.split(',') : key;\n\n      stringifiedKey = bytes.reduce((string, byte) => {\n        string += (String.fromCharCode(byte));\n        return string;\n      }, '');\n    } else if (isNumber(key) || keyIsString && !isNaN(key)) {\n      stringifiedKey = String.fromCharCode(keyIsString ? parseInt(key, 10) : 10);\n    }\n\n    normalizedObject[stringifiedKey] = isObject(value) ? stringifyBufferKeys(value) : value;\n  });\n\n  return normalizedObject;\n}\n\nexport default class extends PubNubCore {\n  constructor(setup: InternalSetupStruct) {\n    // extract config.\n    const { listenToBrowserNetworkEvents = true } = setup;\n\n    setup.db = db;\n    setup.sdkFamily = 'Web';\n    setup.networking = new Networking({ del, get, post, patch, sendBeacon });\n    setup.cbor = new Cbor((arrayBuffer) => stringifyBufferKeys(CborReader.decode(arrayBuffer)), base64ToBinary);\n\n    super(setup);\n\n    if (listenToBrowserNetworkEvents) {\n      // mount network events.\n      window.addEventListener('offline', () => {\n        this.networkDownDetected();\n      });\n\n      window.addEventListener('online', () => {\n        this.networkUpDetected();\n      });\n    }\n  }\n}\n"],"file":"index.js"}