{"version":3,"sources":["core/endpoints/channel_groups/remove_channels.js"],"names":["getOperation","operationConstants","PNRemoveChannelsFromGroupOperation","validateParams","modules","incomingParams","channels","channelGroup","config","length","subscribeKey","getURL","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","remove","join","handleResponse"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AACA;;;;AAEO,SAASA,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,kCAA1B;AACD;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAgDC,cAAhD,EAAqF;AAAA,MACpFC,QADoF,GACzDD,cADyD,CACpFC,QADoF;AAAA,MAC1EC,YAD0E,GACzDF,cADyD,CAC1EE,YAD0E;AAAA,MAEpFC,MAFoF,GAEzEJ,OAFyE,CAEpFI,MAFoF;AAI1F,MAAI,CAACD,YAAL,EAAmB,OAAO,uBAAP;AACnB,MAAI,CAACD,QAAD,IAAaA,QAAQ,CAACG,MAAT,KAAoB,CAArC,EAAwC,OAAO,kBAAP;AACxC,MAAI,CAACD,MAAM,CAACE,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASC,MAAT,CAAgBP,OAAhB,EAAwCC,cAAxC,EAAqF;AAAA,MACpFE,YADoF,GACnEF,cADmE,CACpFE,YADoF;AAAA,MAEpFC,MAFoF,GAEzEJ,OAFyE,CAEpFI,MAFoF;AAG1F,oDAA2CA,MAAM,CAACE,YAAlD,4BAAgFE,kBAAMC,YAAN,CAAmBN,YAAnB,CAAhF;AACD;;AAEM,SAASO,iBAAT,OAAsD;AAAA,MAAzBN,MAAyB,QAAzBA,MAAyB;AAC3D,SAAOA,MAAM,CAACO,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAA2B;AAChC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBb,OAAvB,EAA+CC,cAA/C,EAA4F;AAAA,8BACzEA,cADyE,CAC3FC,QAD2F;AAAA,MAC3FA,QAD2F,sCAChF,EADgF;AAGjG,SAAO;AACLY,IAAAA,MAAM,EAAEZ,QAAQ,CAACa,IAAT,CAAc,GAAd;AADH,GAAP;AAGD;;AAEM,SAASC,cAAT,GAAkC;AACvC,SAAO,EAAP;AACD","sourcesContent":["/* @flow */\n\nimport { RemoveChannelParams, ModulesInject } from '../../flow_interfaces';\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\n\nexport function getOperation(): string {\n  return operationConstants.PNRemoveChannelsFromGroupOperation;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: RemoveChannelParams) {\n  let { channels, channelGroup } = incomingParams;\n  let { config } = modules;\n\n  if (!channelGroup) return 'Missing Channel Group';\n  if (!channels || channels.length === 0) return 'Missing Channels';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: RemoveChannelParams): string {\n  let { channelGroup } = incomingParams;\n  let { config } = modules;\n  return `/v1/channel-registration/sub-key/${config.subscribeKey}/channel-group/${utils.encodeString(channelGroup)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject) {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported() {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: RemoveChannelParams): Object {\n  let { channels = [] } = incomingParams;\n\n  return {\n    remove: channels.join(',')\n  };\n}\n\nexport function handleResponse(): Object {\n  return {};\n}\n"],"file":"remove_channels.js"}