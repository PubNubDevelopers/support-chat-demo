{"version":3,"sources":["core/endpoints/history/message_counts.js"],"names":["getOperation","operationConstants","PNMessageCounts","validateParams","modules","incomingParams","channels","timetoken","channelTimetokens","config","length","subscribeKey","getURL","stringifiedChannels","join","utils","encodeString","getRequestTimeout","getTransactionTimeout","isAuthSupported","prepareParams","outgoingParams","tt","channelsTimetoken","handleResponse","serverResponse"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;;;;;;;;;;;AAQO,SAASA,YAAT,GAAgC;AACrC,SAAOC,uBAAmBC,eAA1B;AACD;;AAEM,SAASC,cAAT,CAAwBC,OAAxB,EAAgDC,cAAhD,EAAyF;AAAA,MACxFC,QADwF,GAC7CD,cAD6C,CACxFC,QADwF;AAAA,MAC9EC,SAD8E,GAC7CF,cAD6C,CAC9EE,SAD8E;AAAA,MACnEC,iBADmE,GAC7CH,cAD6C,CACnEG,iBADmE;AAAA,MAExFC,MAFwF,GAE7EL,OAF6E,CAExFK,MAFwF;AAI9F,MAAI,CAACH,QAAL,EAAe,OAAO,iBAAP;AACf,MAAIC,SAAS,IAAIC,iBAAjB,EAAoC,OAAO,2DAAP;AACpC,MAAKD,SAAS,IAAIC,iBAAd,IAAqCA,iBAAiB,CAACE,MAAlB,GAA2B,CAAhE,IAAuEJ,QAAQ,CAACI,MAAT,KAAoBF,iBAAiB,CAACE,MAAjH,EAA0H,OAAO,uDAAP;AAC1H,MAAI,CAACD,MAAM,CAACE,YAAZ,EAA0B,OAAO,uBAAP;AAC3B;;AAEM,SAASC,MAAT,CAAgBR,OAAhB,EAAwCC,cAAxC,EAAyF;AAAA,MACxFC,QADwF,GAC3ED,cAD2E,CACxFC,QADwF;AAAA,MAExFG,MAFwF,GAE7EL,OAF6E,CAExFK,MAFwF;AAI9F,MAAII,mBAAmB,GAAGP,QAAQ,CAACQ,IAAT,CAAc,GAAd,CAA1B;AAEA,uCAA8BL,MAAM,CAACE,YAArC,6BAAoEI,kBAAMC,YAAN,CAAmBH,mBAAnB,CAApE;AACD;;AAEM,SAASI,iBAAT,OAA+D;AAAA,MAAlCR,MAAkC,QAAlCA,MAAkC;AACpE,SAAOA,MAAM,CAACS,qBAAP,EAAP;AACD;;AAEM,SAASC,eAAT,GAAoC;AACzC,SAAO,IAAP;AACD;;AAEM,SAASC,aAAT,CAAuBhB,OAAvB,EAA+CC,cAA/C,EAAgG;AAAA,MAC7FE,SAD6F,GAC5DF,cAD4D,CAC7FE,SAD6F;AAAA,MAClFC,iBADkF,GAC5DH,cAD4D,CAClFG,iBADkF;AAErG,MAAIa,cAAsB,GAAG,EAA7B;;AAEA,MAAKb,iBAAD,IAAwBA,iBAAiB,CAACE,MAAlB,KAA6B,CAAzD,EAA6D;AAAA,4CAChDF,iBADgD;AAAA,QACtDc,EADsD;;AAE3DD,IAAAA,cAAc,CAACd,SAAf,GAA2Be,EAA3B;AACD,GAHD,MAGO,IAAId,iBAAJ,EAAuB;AAC5Ba,IAAAA,cAAc,CAACE,iBAAf,GAAmCf,iBAAiB,CAACM,IAAlB,CAAuB,GAAvB,CAAnC;AACD,GAFM,MAEA,IAAIP,SAAJ,EAAe;AACpBc,IAAAA,cAAc,CAACd,SAAf,GAA2BA,SAA3B;AACD;;AAED,SAAOc,cAAP;AACD;;AAEM,SAASG,cAAT,CAAwBpB,OAAxB,EAAgDqB,cAAhD,EAAkH;AACvH,SAAO;AAAEnB,IAAAA,QAAQ,EAAEmB,cAAc,CAACnB;AAA3B,GAAP;AACD","sourcesContent":["/* @flow */\n\nimport operationConstants from '../../constants/operations';\nimport utils from '../../utils';\nimport type {\n  MessageCounterArguments,\n  MessageCountersResponse,\n  ModulesInject\n} from '../../flow_interfaces';\n\n\nexport function getOperation(): string {\n  return operationConstants.PNMessageCounts;\n}\n\nexport function validateParams(modules: ModulesInject, incomingParams: MessageCounterArguments) {\n  let { channels, timetoken, channelTimetokens } = incomingParams;\n  let { config } = modules;\n\n  if (!channels) return 'Missing channel';\n  if (timetoken && channelTimetokens) return 'timetoken and channelTimetokens are incompatible together';\n  if ((timetoken && channelTimetokens) && (channelTimetokens.length > 1) && (channels.length !== channelTimetokens.length)) return 'Length of channelTimetokens and channels do not match';\n  if (!config.subscribeKey) return 'Missing Subscribe Key';\n}\n\nexport function getURL(modules: ModulesInject, incomingParams: MessageCounterArguments): string {\n  let { channels } = incomingParams;\n  let { config } = modules;\n\n  let stringifiedChannels = channels.join(',');\n\n  return `/v3/history/sub-key/${config.subscribeKey}/message-counts/${utils.encodeString(stringifiedChannels)}`;\n}\n\nexport function getRequestTimeout({ config }: ModulesInject): boolean {\n  return config.getTransactionTimeout();\n}\n\nexport function isAuthSupported(): boolean {\n  return true;\n}\n\nexport function prepareParams(modules: ModulesInject, incomingParams: MessageCounterArguments): Object {\n  const { timetoken, channelTimetokens } = incomingParams;\n  let outgoingParams: Object = {};\n\n  if ((channelTimetokens) && (channelTimetokens.length === 1)) {\n    let [tt] = channelTimetokens;\n    outgoingParams.timetoken = tt;\n  } else if (channelTimetokens) {\n    outgoingParams.channelsTimetoken = channelTimetokens.join(',');\n  } else if (timetoken) {\n    outgoingParams.timetoken = timetoken;\n  }\n\n  return outgoingParams;\n}\n\nexport function handleResponse(modules: ModulesInject, serverResponse: MessageCounterArguments): MessageCountersResponse {\n  return { channels: serverResponse.channels };\n}\n"],"file":"message_counts.js"}